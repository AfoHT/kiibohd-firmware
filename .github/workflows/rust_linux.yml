name: Rust Linux

on: [push, pull_request]

env:
  deb_packages: >-
    dfu-util

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: thumbv7em-none-eabi,x86_64-unknown-linux-gnu
      - name: cargo-binstall
        run: |
          mkdir -p ~/.cargo/bin
          wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
          tar xf cargo-binstall*.tgz -C ~/.cargo/bin
      - run: cargo binstall --no-confirm cargo-make
      - name: Cargo Make Check
        run: cargo make check

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: thumbv7em-none-eabi,x86_64-unknown-linux-gnu
          components: llvm-tools-preview
      - name: cargo-binstall
        run: |
          mkdir -p ~/.cargo/bin
          wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
          tar xf cargo-binstall*.tgz -C ~/.cargo/bin
      - run: cargo binstall --no-confirm cargo-make cargo-binutils flip-link
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.deb_packages }}
      - name: Cargo Make bin-dfu
        if: github.ref_type == 'branch'
        run: cargo make bin-dfu
      - name: Cargo Make bin-dfu-release
        if: github.ref_type == 'branch'
        run: cargo make bin-dfu-release
      - name: Update Release Environment
        if: github.ref_type == 'tag'
        run: |
          # Get name of what we're releasing (e.g. keystonetkl-v0.1.0 -> keystonetkl)
          rust_release_target=$(echo ${{ github.ref_name }} | sed 's/-v[[:digit:]].*$//')
          # Build release name (i.e. What's shown on GitHub)
          # (e.g. keystonetkl-v0.1.0 -> keystonetkl v0.1.0)
          rust_release_target_name=$(echo ${{ github.ref_name }} | sed 's/-\(v[[:digit:]].*\)$/ \1/')
          # Retrieve the path to target we're releasing
          rust_release_target_path=$(cargo pkgid $rust_release_target | sed 's|file://||' | cut -d '#' -f1)
          # Add env variables to the GitHub environment
          echo "rust_release_target=${rust_release_target}" >> $GITHUB_ENV
          echo "rust_release_target_name=${rust_release_target_name}" >> $GITHUB_ENV
          echo "rust_release_target_path=${rust_release_target_path}" >> $GITHUB_ENV
      # Release-only debug build
      - name: Cargo Make bin-dfu (tagged)
        if: github.ref_type == 'tag' && env.rust_release_target_name != '' && env.rust_release_target_name != 'kiibohd-atsam4s'
        run: cargo make bin-dfu
      # Release-only release build
      - name: Cargo Make bin-dfu-release (tagged)
        if: github.ref_type == 'tag' && env.rust_release_target_name != '' && env.rust_release_target_name != 'kiibohd-atsam4s'
        run: cargo make bin-dfu-release
      # Always upload build artifacts
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Firmware
          path: target/*.dfu.bin
      # Only push release artifacts when tagged with a proper release
      # Ignore kiibohd-atsam4s as it's not a binary release
      - name: Release
        uses: ncipollo/release-action@v1
        if: github.ref_type == 'tag' && env.rust_release_target_name != '' && env.rust_release_target_name != 'kiibohd-atsam4s'
        with:
          allowUpdates: true
          artifacts: target/*.dfu.bin
          bodyFile: ${{ env.rust_release_target_path }}/CHANGELOG.md

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: thumbv7em-none-eabi,x86_64-unknown-linux-gnu
          components: rustfmt
      - name: cargo-binstall
        run: |
          mkdir -p ~/.cargo/bin
          wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
          tar xf cargo-binstall*.tgz -C ~/.cargo/bin
      - run: cargo binstall --no-confirm cargo-make
      - name: Cargo Make fmt-check
        run: cargo make fmt-check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@nightly
        with:
          targets: thumbv7em-none-eabi,x86_64-unknown-linux-gnu
          components: clippy
      - name: cargo-binstall
        run: |
          mkdir -p ~/.cargo/bin
          wget https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-unknown-linux-musl.tgz
          tar xf cargo-binstall*.tgz -C ~/.cargo/bin
      - run: cargo binstall --no-confirm cargo-make
      - name: Cargo Make Clippy
        run: cargo make clippy
